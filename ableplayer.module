<?php

/**
 * @file
 *
 */

define('ABLEPLAYER_BUNDLE_AUDIO', 'audio');
define('ABLEPLAYER_BUNDLE_VIDEO', 'video');

require_once drupal_get_path('module', 'ableplayer') . '/includes/ableplayer.formatters.inc';

/**
 * Implements hook_help().
 */
function ableplayer_help($path, $arg) {
  $output = NULL;

  switch ($path) {
    case 'admin/help#ableplayer':
      $output = '<p>' . t('See the readme or project page for detailed setup information.') . '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_libraries_info().
 */
function ableplayer_libraries_info() {
  $libraries = array();

  $libraries['ableplayer'] = array(
    'name' => 'Able Player',
    'vendor url' => 'https://github.com/ableplayer/ableplayer',
    'download url' => 'https://github.com/ableplayer/ableplayer/releases',
    'version arguments' => array(
      'file' => 'build/ableplayer.min.js',
      'pattern' => '@ableplayer V?(\d+\.\d+\.\d+)@',
    ),
    'files' => array(
      'js' => array(
        'build/ableplayer.min.js' => array('group' => JS_LIBRARY, 'preprocess' => FALSE),
        'thirdparty/jquery.cookie.js' => array('group' => JS_LIBRARY, 'preprocess' => FALSE),
      ),
      'css' => array(
        'build/ableplayer.min.css' => array('group' => CSS_DEFAULT),
      ),
    ),
    'variants' => array(
      'source' => array(
        'files' => array(
          'js' => array(
            'build/ableplayer.js' => array('group' => JS_LIBRARY, 'preprocess' => FALSE),
            'thirdparty/jquery.cookie.js' => array('group' => JS_LIBRARY, 'preprocess' => FALSE),
          ),
          'css' => array(
            'styles/ableplayer-playlist.css' => array('group' => CSS_DEFAULT),
            'styles/ableplayer-search.css' => array('group' => CSS_DEFAULT),
            'styles/ableplayer-sign.css' => array('group' => CSS_DEFAULT),
            'styles/ableplayer-transcript.css' => array('group' => CSS_DEFAULT),
            'styles/ableplayer.css' => array('group' => CSS_DEFAULT),
          ),
        ),
      ),
    ),
    'dependencies' => array(
      'modernizr',
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function ableplayer_menu() {
  $items = array();

  $items['admin/config/media/ableplayer'] = array(
    'title' => 'Able Player',
    'description' => 'Configuration for Able Player library',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ableplayer_form'),
    'access arguments' => array('administer site'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/ableplayer.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_modernizr_info().
 */
function ableplayer_modernizr_info() {
  $tests = array(
    /* CSS */
    'fontface',
    'backgroundsize',
    'borderimage',
    'borderradius',
    'boxshadow',
    'flexbox',
    'flexboxlegacy',
    'hsla',
    'multiplebgs',
    'opacity',
    'rgba',
    'textshadow',
    'cssanimations',
    'csscolumns',
    'generatedcontent',
    'cssgradients',
    'cssreflections',
    'csstransforms',
    'csstransforms3d',
    'csstransitions',
    /* HTML5 */
    'audio',
    'video',
    'input',
    'inputtypes',
    /* Extensibility */
    'teststyles',
    'testprop',
    'testallprops',
    'prefixes',
    'domprefixes',
    /* Extra */
    'shiv',
    'load',
    'mq',
    'cssclasses',
  );

  return $tests;
}

/**
 * Implements hook_page_build().
 *
 * This avoids loading Able Player assets on AJAX requests.
 */
function ableplayer_page_build(&$page) {
  $compression_level = variable_get('ableplayer_compression_level', 0);

  if ($compression_level === 0) {
    libraries_load('ableplayer', 'source');
  }
  else {
    libraries_load('ableplayer');
  }
}

/**
 * Implements hook_theme().
 */
function ableplayer_theme($existing, $type, $theme, $path) {
  $themes = array();

  $themes['ableplayer'] = array(
    'variables' => array(
      'id' => NULL,
      'uri' => NULL,
      'mimetype' => NULL,
      'options' => array(),
    ),
    'file' => 'ableplayer.theme.inc',
    'path' => $path . '/themes',
  );

  return $themes;
}

/**
 * Helper function to return information about the Able Player installation.
 *
 * Files that are not found installed in the expected location are colletected
 * and returned.
 */
function ableplayer_installation_status() {
  $status = array();
  $version = NULL;
  $message = NULL;

  $ableplayer = libraries_detect('ableplayer');

  $files = array_keys(array_merge(
    $ableplayer['files']['js'],
    $ableplayer['files']['css']
  ));

  $missing_files = array();

  foreach ($files as $file) {
    $path = $ableplayer['library path'] . '/' . $file;

    if (!is_file($path) || !is_readable($path)) {
      $missing_files[$path] = t('The file ') . '<em>' . t('@file',
        array('@file' => $path, )) . '</em>' . t(' was not found.');
    }
  }

  if (!empty($missing_files)) {
    $message = trim(implode(' ', $missing_files));
  }
  elseif (!$ableplayer['installed']) {
    $message = t($ableplayer['error message']);
  }
  else {
    $version = $ableplayer['version'];
  }

  $status['error'] = !empty($message);
  $status['version'] = $version;
  $status['message'] = $message;

  return $status;
}
