<?php

/**
 * @file
 * Module file for Able Player.
 */

/**
 * Defined constants for the default File Entity video and audio bundles.
 */
define('ABLEPLAYER_BUNDLE_AUDIO', 'audio');
define('ABLEPLAYER_BUNDLE_VIDEO', 'video');

/**
 * Defined constants for the supported mimetypes.
 */
define('ABLEPLAYER_MIME_MPEG', 'mpeg');
define('ABLEPLAYER_MIME_OGG', 'ogg');
define('ABLEPLAYER_MIME_MP4', 'mp4');
define('ABLEPLAYER_MIME_WEBM', 'webm');
define('ABLEPLAYER_MIME_YOUTUBE', 'youtube');

require_once drupal_get_path('module', 'ableplayer') . '/includes/ableplayer.formatters.inc';

/**
 * Impelements hook_file_default_types_alter().
 */
function ableplayer_file_default_types_alter(&$types) {
  $types['document']->mimetypes[] = 'text/vtt';
}

/**
 * Implements hook_help().
 */
function ableplayer_help($path, $arg) {
  switch ($path) {

    case 'admin/help#ableplayer':

      $filepath = drupal_get_path('module', 'ableplayer') . '/README.md';

      if (is_file($filepath) && is_readable($filepath)) {
        $readme = file_get_contents($filepath);
      }

      if (!isset($readme)) {
        return NULL;
      }

      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;

  }
}

/**
 * Implements hook_libraries_info().
 */
function ableplayer_libraries_info() {
  $libraries = array();

  $js_options = array(
    'group' => JS_LIBRARY,
    'requires_jquery' => TRUE,
  );

  $css_options = array(
    'group' => CSS_DEFAULT,
  );

  $libraries['ableplayer'] = array(
    'name' => 'Able Player',
    'vendor url' => 'https://github.com/ableplayer/ableplayer',
    'download url' => 'https://github.com/ableplayer/ableplayer/releases',
    'version arguments' => array(
      'file' => 'build/ableplayer.min.js',
      'pattern' => '@ableplayer V?(\d+\.\d+\.\d+)@',
    ),
    'files' => array(
      'js' => array(
        'build/ableplayer.min.js' => $js_options,
        'thirdparty/jquery.cookie.js' => $js_options,
      ),
      'css' => array(
        'build/ableplayer.min.css' => $css_options,
      ),
    ),
    'variants' => array(
      'source' => array(
        'files' => array(
          'js' => array(
            'build/ableplayer.js' => $js_options,
            'thirdparty/jquery.cookie.js' => $js_options,
          ),
          'css' => array(
            'styles/ableplayer-playlist.css' => $css_options,
            'styles/ableplayer-search.css' => $css_options,
            'styles/ableplayer-sign.css' => $css_options,
            'styles/ableplayer-transcript.css' => $css_options,
            'styles/ableplayer.css' => $css_options,
          ),
        ),
      ),
    ),
    'dependencies' => array(
      'modernizr',
    ),
  );

  return $libraries;
}

/**
 * Implements hook_js_alter().
 *
 * Removes other jquery.cookie.js versions to avoid conflict with the updated
 * version required by Able Player.
 */
function ableplayer_js_alter(&$javascript) {
  $ableplayer = libraries_get_path('ableplayer');

  if (!$ableplayer) {
    return;
  }

  $ableplayer_loaded = FALSE;
  $versions = array();

  foreach ($javascript as $key => $value) {
    if (strpos($key, 'ableplayer') !== FALSE) {
      $ableplayer_loaded = TRUE;
    }
    elseif (strpos($key, 'jquery.cookie.js') !== FALSE) {
      $versions[] = $key;
    }
  }

  if ($ableplayer_loaded) {
    $javascript = array_diff_key($javascript, $versions);
  }
}

/**
 * Implements hook_menu().
 */
function ableplayer_menu() {
  $items = array();

  $items['admin/config/media/ableplayer'] = array(
    'title' => 'Able Player',
    'description' => 'Configuration for Able Player library',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ableplayer_form'),
    'access arguments' => array('administer site'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/ableplayer.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_modernizr_info().
 */
function ableplayer_modernizr_info() {
  $tests = array(
    /* CSS */
    'fontface',
    'backgroundsize',
    'borderimage',
    'borderradius',
    'boxshadow',
    'flexbox',
    'flexboxlegacy',
    'hsla',
    'multiplebgs',
    'opacity',
    'rgba',
    'textshadow',
    'cssanimations',
    'csscolumns',
    'generatedcontent',
    'cssgradients',
    'cssreflections',
    'csstransforms',
    'csstransforms3d',
    'csstransitions',
    /* HTML5 */
    'audio',
    'video',
    'input',
    'inputtypes',
    /* Extensibility */
    'teststyles',
    'testprop',
    'testallprops',
    'prefixes',
    'domprefixes',
    /* Extra */
    'shiv',
    'load',
    'mq',
    'cssclasses',
  );

  return $tests;
}

/**
 * Implements hook_theme().
 */
function ableplayer_theme($existing, $type, $theme, $path) {
  $themes = array();

  $themes['ableplayer'] = array(
    'variables' => array(
      'id' => NULL,
      'uri' => NULL,
      'mimetype' => NULL,
      'tracks' => array(),
      'options' => array(),
    ),
    'file' => 'ableplayer.theme.inc',
    'path' => $path . '/themes',
  );

  return $themes;
}
