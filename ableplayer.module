<?php

/*
 * Implements hook_libraries_info().
 */
function ableplayer_libraries_info() {
  $libraries = array();

  $libraries['ableplayer'] = array(
    'name' => 'Able Player',
    'vendor url' => 'https://github.com/ableplayer/ableplayer',
    'download url' => 'https://github.com/ableplayer/ableplayer/releases',
    'version arguments' => array(
      'file' => 'build/ableplayer.min.js',
      'pattern' => '@ableplayer V?(\d+\.\d+\.\d+)@',
    ),
    'files' => array(
      'js' => array(
        'thirdparty/jquery.cookie.js' => array('group' => JS_LIBRARY, 'preprocess' => FALSE),
        'build/ableplayer.min.js' => array('group' => JS_LIBRARY, 'preprocess' => FALSE),
      ),
      'css' => array(
        'styles/ableplayer.css' => array('group' => CSS_DEFAULT),
        'styles/ableplayer-transcript.css' => array('group' => CSS_DEFAULT),
      ),
    ),
    'dependencies' => array(
      'modernizr',
    ),
  );

  return $libraries;
}

function ableplayer_installation_status() {
  $status = array();
  $version = NULL;
  $message = NULL;

  $ableplayer = libraries_detect('ableplayer');

  $files = array_keys(array_merge(
    $ableplayer['files']['js'],
    $ableplayer['files']['css']
  ));

  $missing_files = array();

  foreach ($files as $file) {
    $path = $ableplayer['library path'] . '/' . $file;

    if (!is_file($path) || !is_readable($path)) {
      $missing_files[$path] = t('The file ') . '<em>' . t('@file', array('@file' => $path,)) . '</em>' .
        t(' was not found.');
    }
  }

  if (!empty($missing_files)) {
    $message = trim(implode(' ', $missing_files));
  } else if (!$ableplayer['installed']) {
    $message = t($ableplayer['error message']);
  } else {
    $version = $ableplayer['version'];
  }

  $status['error'] = !empty($message);
  $status['version'] = $version;
  $status['message'] = $message;

  return $status;
}
